/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.1.0 (NJsonSchema v10.1.21.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ActorsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:50658";
    }

    get(skip: number | undefined, take: number | undefined, name: string | null | undefined, surname: string | null | undefined): Promise<ActorsVm> {
        let url_ = this.baseUrl + "/Actors?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "Skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "Take=" + encodeURIComponent("" + take) + "&";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (surname !== undefined && surname !== null)
            url_ += "Surname=" + encodeURIComponent("" + surname) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ActorsVm> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ActorsVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ActorsVm>(<any>null);
    }

    getLookups(): Promise<ActorLookupVm> {
        let url_ = this.baseUrl + "/Actors/GetLookups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLookups(_response);
        });
    }

    protected processGetLookups(response: Response): Promise<ActorLookupVm> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ActorLookupVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ActorLookupVm>(<any>null);
    }
}

export class DirectorsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:50658";
    }

    getLookups(): Promise<DirectorLookupVm> {
        let url_ = this.baseUrl + "/Directors/GetLookups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLookups(_response);
        });
    }

    protected processGetLookups(response: Response): Promise<DirectorLookupVm> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DirectorLookupVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DirectorLookupVm>(<any>null);
    }
}

export class MoviesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:50658";
    }

    get(id: string | undefined): Promise<MovieVm> {
        let url_ = this.baseUrl + "/Movies?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<MovieVm> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MovieVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MovieVm>(<any>null);
    }

    create(command: CreateMovieCommand): Promise<string> {
        let url_ = this.baseUrl + "/Movies";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    getAll(skip: number | undefined, take: number | undefined, title: string | null | undefined, year: number | null | undefined, locations: Location[] | null | undefined, directorIds: string[] | null | undefined, actorIds: string[] | null | undefined): Promise<MoviesVm> {
        let url_ = this.baseUrl + "/Movies/GetAll?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "Skip=" + encodeURIComponent("" + skip) + "&";
        if (take === null)
            throw new Error("The parameter 'take' cannot be null.");
        else if (take !== undefined)
            url_ += "Take=" + encodeURIComponent("" + take) + "&";
        if (title !== undefined && title !== null)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (year !== undefined && year !== null)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
        if (locations !== undefined && locations !== null)
            locations && locations.forEach(item => { url_ += "Locations=" + encodeURIComponent("" + item) + "&"; });
        if (directorIds !== undefined && directorIds !== null)
            directorIds && directorIds.forEach(item => { url_ += "DirectorIds=" + encodeURIComponent("" + item) + "&"; });
        if (actorIds !== undefined && actorIds !== null)
            actorIds && actorIds.forEach(item => { url_ += "ActorIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<MoviesVm> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MoviesVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MoviesVm>(<any>null);
    }

    update(id: string, command: UpdateMovieCommand): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/Movies/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    delete(id: string): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/Movies/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export class ActorsVm implements IActorsVm {
    actors?: ActorsDto[] | undefined;
    total!: number;

    constructor(data?: IActorsVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["actors"])) {
                this.actors = [] as any;
                for (let item of _data["actors"])
                    this.actors!.push(ActorsDto.fromJS(item));
            }
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): ActorsVm {
        data = typeof data === 'object' ? data : {};
        let result = new ActorsVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.actors)) {
            data["actors"] = [];
            for (let item of this.actors)
                data["actors"].push(item.toJSON());
        }
        data["total"] = this.total;
        return data; 
    }
}

export interface IActorsVm {
    actors?: ActorsDto[] | undefined;
    total: number;
}

export class ActorsDto implements IActorsDto {
    name?: string | undefined;
    surname?: string | undefined;

    constructor(data?: IActorsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.surname = _data["surname"];
        }
    }

    static fromJS(data: any): ActorsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ActorsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        return data; 
    }
}

export interface IActorsDto {
    name?: string | undefined;
    surname?: string | undefined;
}

export class ActorLookupVm implements IActorLookupVm {
    actorLookups?: ActorLookupDto[] | undefined;

    constructor(data?: IActorLookupVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["actorLookups"])) {
                this.actorLookups = [] as any;
                for (let item of _data["actorLookups"])
                    this.actorLookups!.push(ActorLookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ActorLookupVm {
        data = typeof data === 'object' ? data : {};
        let result = new ActorLookupVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.actorLookups)) {
            data["actorLookups"] = [];
            for (let item of this.actorLookups)
                data["actorLookups"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IActorLookupVm {
    actorLookups?: ActorLookupDto[] | undefined;
}

export class ActorLookupDto implements IActorLookupDto {
    id!: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;

    constructor(data?: IActorLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): ActorLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ActorLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["fullName"] = this.fullName;
        return data; 
    }
}

export interface IActorLookupDto {
    id: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;
}

export class DirectorLookupVm implements IDirectorLookupVm {
    directorLookups?: DirectorLookupDto[] | undefined;

    constructor(data?: IDirectorLookupVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["directorLookups"])) {
                this.directorLookups = [] as any;
                for (let item of _data["directorLookups"])
                    this.directorLookups!.push(DirectorLookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DirectorLookupVm {
        data = typeof data === 'object' ? data : {};
        let result = new DirectorLookupVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.directorLookups)) {
            data["directorLookups"] = [];
            for (let item of this.directorLookups)
                data["directorLookups"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDirectorLookupVm {
    directorLookups?: DirectorLookupDto[] | undefined;
}

export class DirectorLookupDto implements IDirectorLookupDto {
    id!: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;

    constructor(data?: IDirectorLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): DirectorLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new DirectorLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["fullName"] = this.fullName;
        return data; 
    }
}

export interface IDirectorLookupDto {
    id: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;
}

export class MovieVm implements IMovieVm {
    movie?: MovieDto | undefined;
    actorLookups?: ActorLookupDto[] | undefined;
    directorLookups?: DirectorLookupDto[] | undefined;

    constructor(data?: IMovieVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.movie = _data["movie"] ? MovieDto.fromJS(_data["movie"]) : <any>undefined;
            if (Array.isArray(_data["actorLookups"])) {
                this.actorLookups = [] as any;
                for (let item of _data["actorLookups"])
                    this.actorLookups!.push(ActorLookupDto.fromJS(item));
            }
            if (Array.isArray(_data["directorLookups"])) {
                this.directorLookups = [] as any;
                for (let item of _data["directorLookups"])
                    this.directorLookups!.push(DirectorLookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MovieVm {
        data = typeof data === 'object' ? data : {};
        let result = new MovieVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["movie"] = this.movie ? this.movie.toJSON() : <any>undefined;
        if (Array.isArray(this.actorLookups)) {
            data["actorLookups"] = [];
            for (let item of this.actorLookups)
                data["actorLookups"].push(item.toJSON());
        }
        if (Array.isArray(this.directorLookups)) {
            data["directorLookups"] = [];
            for (let item of this.directorLookups)
                data["directorLookups"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMovieVm {
    movie?: MovieDto | undefined;
    actorLookups?: ActorLookupDto[] | undefined;
    directorLookups?: DirectorLookupDto[] | undefined;
}

export class MovieDto implements IMovieDto {
    id!: string;
    title?: string | undefined;
    year!: number;
    location!: Location;
    actors?: MovieDisplayActorDto[] | undefined;
    director?: MovieDisplayDirectorDto | undefined;

    constructor(data?: IMovieDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.year = _data["year"];
            this.location = _data["location"];
            if (Array.isArray(_data["actors"])) {
                this.actors = [] as any;
                for (let item of _data["actors"])
                    this.actors!.push(MovieDisplayActorDto.fromJS(item));
            }
            this.director = _data["director"] ? MovieDisplayDirectorDto.fromJS(_data["director"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MovieDto {
        data = typeof data === 'object' ? data : {};
        let result = new MovieDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["year"] = this.year;
        data["location"] = this.location;
        if (Array.isArray(this.actors)) {
            data["actors"] = [];
            for (let item of this.actors)
                data["actors"].push(item.toJSON());
        }
        data["director"] = this.director ? this.director.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMovieDto {
    id: string;
    title?: string | undefined;
    year: number;
    location: Location;
    actors?: MovieDisplayActorDto[] | undefined;
    director?: MovieDisplayDirectorDto | undefined;
}

export enum Location {
    DVD = 1,
    Download = 2,
}

export class MovieDisplayActorDto implements IMovieDisplayActorDto {
    id!: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;

    constructor(data?: IMovieDisplayActorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): MovieDisplayActorDto {
        data = typeof data === 'object' ? data : {};
        let result = new MovieDisplayActorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["fullName"] = this.fullName;
        return data; 
    }
}

export interface IMovieDisplayActorDto {
    id: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;
}

export class MovieDisplayDirectorDto implements IMovieDisplayDirectorDto {
    id!: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;

    constructor(data?: IMovieDisplayDirectorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): MovieDisplayDirectorDto {
        data = typeof data === 'object' ? data : {};
        let result = new MovieDisplayDirectorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["fullName"] = this.fullName;
        return data; 
    }
}

export interface IMovieDisplayDirectorDto {
    id: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;
}

export class MoviesVm implements IMoviesVm {
    movies?: MoviesDto[] | undefined;
    actorLookups?: ActorLookupDto[] | undefined;
    directorLookups?: DirectorLookupDto[] | undefined;
    total!: number;

    constructor(data?: IMoviesVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["movies"])) {
                this.movies = [] as any;
                for (let item of _data["movies"])
                    this.movies!.push(MoviesDto.fromJS(item));
            }
            if (Array.isArray(_data["actorLookups"])) {
                this.actorLookups = [] as any;
                for (let item of _data["actorLookups"])
                    this.actorLookups!.push(ActorLookupDto.fromJS(item));
            }
            if (Array.isArray(_data["directorLookups"])) {
                this.directorLookups = [] as any;
                for (let item of _data["directorLookups"])
                    this.directorLookups!.push(DirectorLookupDto.fromJS(item));
            }
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): MoviesVm {
        data = typeof data === 'object' ? data : {};
        let result = new MoviesVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.movies)) {
            data["movies"] = [];
            for (let item of this.movies)
                data["movies"].push(item.toJSON());
        }
        if (Array.isArray(this.actorLookups)) {
            data["actorLookups"] = [];
            for (let item of this.actorLookups)
                data["actorLookups"].push(item.toJSON());
        }
        if (Array.isArray(this.directorLookups)) {
            data["directorLookups"] = [];
            for (let item of this.directorLookups)
                data["directorLookups"].push(item.toJSON());
        }
        data["total"] = this.total;
        return data; 
    }
}

export interface IMoviesVm {
    movies?: MoviesDto[] | undefined;
    actorLookups?: ActorLookupDto[] | undefined;
    directorLookups?: DirectorLookupDto[] | undefined;
    total: number;
}

export class MoviesDto implements IMoviesDto {
    id!: string;
    title?: string | undefined;
    year!: number;
    location!: Location;
    actors?: MovieListActorDto[] | undefined;
    director?: MovieListDirectorDto | undefined;
    actorString?: string | undefined;
    directorString?: string | undefined;

    constructor(data?: IMoviesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.year = _data["year"];
            this.location = _data["location"];
            if (Array.isArray(_data["actors"])) {
                this.actors = [] as any;
                for (let item of _data["actors"])
                    this.actors!.push(MovieListActorDto.fromJS(item));
            }
            this.director = _data["director"] ? MovieListDirectorDto.fromJS(_data["director"]) : <any>undefined;
            this.actorString = _data["actorString"];
            this.directorString = _data["directorString"];
        }
    }

    static fromJS(data: any): MoviesDto {
        data = typeof data === 'object' ? data : {};
        let result = new MoviesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["year"] = this.year;
        data["location"] = this.location;
        if (Array.isArray(this.actors)) {
            data["actors"] = [];
            for (let item of this.actors)
                data["actors"].push(item.toJSON());
        }
        data["director"] = this.director ? this.director.toJSON() : <any>undefined;
        data["actorString"] = this.actorString;
        data["directorString"] = this.directorString;
        return data; 
    }
}

export interface IMoviesDto {
    id: string;
    title?: string | undefined;
    year: number;
    location: Location;
    actors?: MovieListActorDto[] | undefined;
    director?: MovieListDirectorDto | undefined;
    actorString?: string | undefined;
    directorString?: string | undefined;
}

export class MovieListActorDto implements IMovieListActorDto {
    id!: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;

    constructor(data?: IMovieListActorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): MovieListActorDto {
        data = typeof data === 'object' ? data : {};
        let result = new MovieListActorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["fullName"] = this.fullName;
        return data; 
    }
}

export interface IMovieListActorDto {
    id: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;
}

export class MovieListDirectorDto implements IMovieListDirectorDto {
    id!: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;

    constructor(data?: IMovieListDirectorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): MovieListDirectorDto {
        data = typeof data === 'object' ? data : {};
        let result = new MovieListDirectorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["fullName"] = this.fullName;
        return data; 
    }
}

export interface IMovieListDirectorDto {
    id: string;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;
}

export class UpdateMovieCommand implements IUpdateMovieCommand {
    id!: string;
    title?: string | undefined;
    year!: number;
    location!: Location;
    directorId!: string;
    actorIds?: string[] | undefined;

    constructor(data?: IUpdateMovieCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.year = _data["year"];
            this.location = _data["location"];
            this.directorId = _data["directorId"];
            if (Array.isArray(_data["actorIds"])) {
                this.actorIds = [] as any;
                for (let item of _data["actorIds"])
                    this.actorIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateMovieCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMovieCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["year"] = this.year;
        data["location"] = this.location;
        data["directorId"] = this.directorId;
        if (Array.isArray(this.actorIds)) {
            data["actorIds"] = [];
            for (let item of this.actorIds)
                data["actorIds"].push(item);
        }
        return data; 
    }
}

export interface IUpdateMovieCommand {
    id: string;
    title?: string | undefined;
    year: number;
    location: Location;
    directorId: string;
    actorIds?: string[] | undefined;
}

export class CreateMovieCommand implements ICreateMovieCommand {
    id!: string;
    title?: string | undefined;
    year!: number;
    location!: Location;
    directorId!: string;
    actorIds?: string[] | undefined;

    constructor(data?: ICreateMovieCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.year = _data["year"];
            this.location = _data["location"];
            this.directorId = _data["directorId"];
            if (Array.isArray(_data["actorIds"])) {
                this.actorIds = [] as any;
                for (let item of _data["actorIds"])
                    this.actorIds!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateMovieCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMovieCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["year"] = this.year;
        data["location"] = this.location;
        data["directorId"] = this.directorId;
        if (Array.isArray(this.actorIds)) {
            data["actorIds"] = [];
            for (let item of this.actorIds)
                data["actorIds"].push(item);
        }
        return data; 
    }
}

export interface ICreateMovieCommand {
    id: string;
    title?: string | undefined;
    year: number;
    location: Location;
    directorId: string;
    actorIds?: string[] | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}